import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the data
data = pd.read_csv("DOGE-USD.csv")
data['Date'] = pd.to_datetime(data['Date'], infer_datetime_format=True)
data.set_index('Date', inplace=True)

# Handle missing values
data = data.dropna()

# Create features
data["gap"] = (data["High"] - data["Low"]) * data["Volume"]
data["y"] = data["High"] / data["Volume"]
data["z"] = data["Low"] / data["Volume"]
data["a"] = data["High"] / data["Low"]
data["b"] = (data["High"] / data["Low"]) * data["Volume"]

# Target variable - Close prices
target = "Close"

# Select features and target variable
features = ["Volume", "gap", "a", "b"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data[features], data[target], test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train an MLP regression model
mlp_model = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
mlp_model.fit(X_train_scaled, y_train)

# Make predictions on the test set
predictions = mlp_model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

# Calculate custom accuracy metric (percentage of predictions within a tolerance)
tolerance = 0.03  # adjust tolerance as needed
accuracy = np.mean(np.abs(predictions - y_test) <= tolerance)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
print(f"Custom Accuracy (within {tolerance} tolerance): {accuracy * 100:.2f}%")

# Visualize the predictions
plt.scatter(y_test, predictions)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.show()

